use .base.Map
use .base.Optional
use .base.Map
use .base.Text
use .base.List
use .base.io

-- Map
-- -------

usersMap: Map Nat Text
usersMap = Map.fromList [(1,"Politrons"),(2,"Bob"),(3,"Osmosis")]

toUpperCaseMap : Map Nat Text
toUpperCaseMap = Map.map Text.toUppercase usersMap

filterMap : Map Nat Text -> Map Nat Text
filterMap inputMap = let
            entries = Map.toList inputMap
            filteredEntries = List.filter (entry ->
                 match entry with
                   (k, v) -> Text.size v > 3) entries
            filteredMap = Map.fromList filterEntries

-- Set
-- -------

usersSet: Set Nat
usersSet = Set.fromList[1,2,3,4,5]

--isMember: Nat -> Set Nat -> Boolean
--isMember num set = Set.member num set

-- List
-- -------

usersList: [Text]
usersList =["Politrons","Bob"]

getByIndex: Nat -> [Text] -> Optional Text
getByIndex index array = List.at index array

-- Add a new entry to the beginning of the list
prependedList : [Text]
prependedList = List.cons "Osmosis" usersList

-- Add a new entry to the end of the list
appendedList : [Text]
appendedList = List.snoc usersList "Osmosis"

foreachAndPrint: [Text] -> ()
foreachAndPrint list = List.foreach list printLine

mapListValues: (Text -> Text) -> [Text] -> [Text]
mapListValues func list = List.map func list

filterListValues: (Text -> Boolean) -> [Text] -> [Text]
filterListValues func list = List.filter func list

collections : '{IO, Exception} ()
-- [Main] Map
-- -----------
--collections _ =  let
--         maybeUser = Map.lookup 1 usersMap
--         match maybeUser with
--            Some value -> printLine value
--            None -> printLine "no record found"
collections _ =  let
            upperMap = toUpperCaseMap
            maybeUser = Map.lookup 1 upperMap
            printLine (getOrElse "No user found" maybeUser)

-- [Main] Set
-- -----------

-- collections _ =  let
--                    printLine (Text.fromBoolean(isMember 1 usersSet))
-- [Main] List
-- -----------
--collections _ =  let
--                maybeUser = getByIndex 1 usersList
--                printLine (getOrElse "No user found" maybeUser)
--collections _ =  let
--                newList = prependedList
--                maybeUser = getByIndex 0 newList
--                printLine (getOrElse "No user found" maybeUser)
-- collections _ =  let
--                newList = appendedList
--                maybeUser = getByIndex 2 newList
--                printLine (getOrElse "No user found" maybeUser)
-- collections _ =  let
--                  newList = ["Hello", "Pure", "Functional","World"]
--                  foreachAndPrint newList
--collections _ =  let
--                      newList = ["Hello", "Pure", "Functional","World"]
--                      updatedList = mapListValues (input -> Text.toUppercase input) newList
--                      maybeUser = getByIndex 1 updatedList
--                      printLine (getOrElse "No user found" maybeUser)
--collections _ =  let
--                      newList = ["Hello", "Pure", "Functional","World"]
--                      updatedList = filterListValues (input -> Text.size input > 4) newList
--                      maybeUser = getByIndex 0 updatedList
--                      printLine (getOrElse "No user found" maybeUser)
