use .base.io.IO
use .base.Text
use .base.Int
use .base.List

--[Optional Effect]
-- ----------------

-- Finds an element in a list of Text values, returning it as an Optional Text.
findElement : Text -> [Text] -> Optional Text
findElement target list = List.find (element -> element == target) list

-- Handles an Optional Text, returning the text if it exists, or "Element not found" if it doesn't.
handleOption : Optional Text -> Text
handleOption maybeText = match maybeText with
                            Some text -> text
                            None -> "Element not found"

-- Creates an Optional Text from a given Text value.
createOptional : Text -> Optional Text
createOptional value = Some value

-- Maps a function over an Optional Text, converting it to uppercase if it exists.
mapOptionalValues: Optional Text -> Optional Text
mapOptionalValues maybeText = Optional.map (text -> Text.toUppercase text) maybeText

-- Filters an Optional Text, keeping it only if its size is greater than 5.
filterOptionalValues: Optional Text -> Optional Text
filterOptionalValues maybeText = Optional.filter (text -> Text.size text > 5) maybeText

--[Either Effect]
-- --------------

-- Creates an Either type with the given Text as the Right value.
createEither: Text -> Either Failure Text
createEither text = Right text

-- A function that divides two numbers and uses `Either` to handle division by zero effect as [Left]
eitherSideEffect : Nat -> Nat -> Either Text Nat
eitherSideEffect x y =
    if y == 0  then
        Left "Division by zero!"
    else
        Right (x / y)

-- Maps a function over the Right value of an Either, leaving the Left value unchanged.
eitherMap : Either Failure Text -> (Text -> Text) -> Either Failure Text
eitherMap either mapFunc= let
                match either with
                       Right value ->  Right (mapFunc value)
                       Left error -> Left error

--[Failure Effect]
-- ---------------

failure: Failure
failure =
     Generic.failure
        "A side effect happens here" ""


--[Main Execution]
-- ---------------
effectSystems : '{IO, Exception} ()

--[Optional Main]
-- ---------------
--effectSystems _ = let
--                    maybeElement = findElement "hello" ["hello", "functional", "world"]
--                    printLine (getOrElse "No element found" maybeElement)
--effectSystems _ = let
--                    maybeElement = findElement "world" ["hello", "functional", "world"]
--                    element = handleOption maybeElement
--                    printLine element
--effectSystems  _ = printLine (getOrElse "No element found" (createOptional "hello unison"))

--effectSystems  _ = let
--                    maybeText = createOptional "hello unison"
--                    maybeTextUpper = mapOptionalValues maybeText
--                    printLine (getOrElse "No element found" maybeTextUpper)

--effectSystems  _ = let
--                    maybeText = createOptional "hello unison"
--                    maybeFilterText = filterOptionalValues maybeText
--                    printLine (getOrElse "No element found" maybeFilterText)

--[Either Main]
-- ---------------
--effectSystems  _ = let
--                either = createEither "Hello Either"
--                result = match either with
--                    Right value -> value
--                    Left error -> "We have a problem"
--                printLine result

--effectSystems  _ = let
--                divideTry = eitherSideEffect 4 2
--                result = match divideTry with
--                    Right value -> Nat.toText value
--                    Left error -> error
--                printLine result

effectSystems  _ = let
                either = createEither "Hello Either"
                eitherUpper = eitherMap either (text -> Text.toUppercase text)
                result = match eitherUpper with
                    Right value -> value
                    Left error -> "We have a problem"
                printLine result

--[Failure Main]
-- ---------------
--effectSystems _ = let
--                errorText = match failure with
--                    Failure errorType desc any -> desc
--                printLine errorText