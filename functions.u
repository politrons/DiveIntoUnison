use .base.io.IO
use .base.Text
use .base.Int
use .base.List

-- Normal Function
-- -------------------

toUpper : Text -> Text
toUpper input = Text.toUppercase input

toLower : Text -> Text
toLower input = Text.toLowercase input

addText : Text -> Text -> Text
addText input text = toUpper input ++ text

sumFunc:  Int -> Int -> Int
sumFunc n1 n2 = n1 + n2

multiplyFunc: Int -> Int -> Int
multiplyFunc n1 n2 = n1 * n2

transformIntToText: Int -> Text
transformIntToText number = Int.toText(number)

transformIntsToTexts : [Int] -> [Text]
transformIntsToTexts ints = List.map Int.toText ints

joinWithCommas : [Text] -> Text
joinWithCommas texts = Text.join ", " texts

--[Filter] functions
-- ----------------
higherThan : Int -> Boolean
higherThan n = n > +10

filterIntArray: (Int -> Boolean) -> [Int] -> [Int]
filterIntArray predicate numbers = List.filter predicate numbers

isHelloOrWorld : Text -> Boolean
isHelloOrWorld text =
  match text with
    "hello" -> true
    "world" -> true
    _ -> false

filterTextArray: (Text -> Boolean) -> [Text] -> [Text]
filterTextArray predicate strings = List.filter predicate strings

--[Map] functions
-- -------------------
mapValuesArray: (Text -> Text) -> [Text] -> [Text]
mapValuesArray transform strings = List.map transform strings

addDollarAroundText: Text -> Text
addDollarAroundText text = "$" ++ text ++ "$"

--Main
-- ------
functions : '{IO, Exception} ()
--functions _ =  printLine (toLower "HELLO, UNISON!")
--functions _ = printLine (addText "hello, unison!" "!!")
--functions _ = printLine (transformIntToText(sumFunc +100 +200))
--functions _ = printLine (transformIntToText(multiplyFunc +10 +15))
--functions _ =
--        let
--        numbers = [+4,+11,+5,+12,+6,+13]
--        printLine (joinWithCommas(transformIntsToTexts(filterIntArray higherThan numbers)))
--functions _ =
--        let
--        strings = ["aloha", "hello","politrons","world"]
--        printLine (joinWithCommas(filterTextArray isHelloOrWorld strings))
--functions _ =
--        let
--        strings = ["hello", "unison","functional","world"]
--        printLine (joinWithCommas(mapValuesArray toUpper strings))
--functions _ =
--        let
--        strings = ["hello", "unison","functional","world"]
--        printLine (joinWithCommas(mapValuesArray addDollarAroundText strings))
functions _ =
        let
        strings = ["hello", "unison","functional","world"]
        printLine (joinWithCommas(mapValuesArray toUpper (mapValuesArray addDollarAroundText strings))